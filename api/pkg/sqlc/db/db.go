// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPermissionStmt, err = db.PrepareContext(ctx, createPermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePermission: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createRolePermissionStmt, err = db.PrepareContext(ctx, createRolePermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRolePermission: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deletePermissionStmt, err = db.PrepareContext(ctx, deletePermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePermission: %w", err)
	}
	if q.deleteRoleStmt, err = db.PrepareContext(ctx, deleteRole); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRole: %w", err)
	}
	if q.deleteRolePermissionStmt, err = db.PrepareContext(ctx, deleteRolePermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRolePermission: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getPermissionStmt, err = db.PrepareContext(ctx, getPermission); err != nil {
		return nil, fmt.Errorf("error preparing query GetPermission: %w", err)
	}
	if q.getPermissionByInternalNameStmt, err = db.PrepareContext(ctx, getPermissionByInternalName); err != nil {
		return nil, fmt.Errorf("error preparing query GetPermissionByInternalName: %w", err)
	}
	if q.getPermissionsStmt, err = db.PrepareContext(ctx, getPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query GetPermissions: %w", err)
	}
	if q.getRoleStmt, err = db.PrepareContext(ctx, getRole); err != nil {
		return nil, fmt.Errorf("error preparing query GetRole: %w", err)
	}
	if q.getRoleByInternalNameStmt, err = db.PrepareContext(ctx, getRoleByInternalName); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoleByInternalName: %w", err)
	}
	if q.getRolePermissionsStmt, err = db.PrepareContext(ctx, getRolePermissions); err != nil {
		return nil, fmt.Errorf("error preparing query GetRolePermissions: %w", err)
	}
	if q.getRolesStmt, err = db.PrepareContext(ctx, getRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoles: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.updatePermissionStmt, err = db.PrepareContext(ctx, updatePermission); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePermission: %w", err)
	}
	if q.updateRoleStmt, err = db.PrepareContext(ctx, updateRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRole: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPermissionStmt != nil {
		if cerr := q.createPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPermissionStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createRolePermissionStmt != nil {
		if cerr := q.createRolePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRolePermissionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deletePermissionStmt != nil {
		if cerr := q.deletePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePermissionStmt: %w", cerr)
		}
	}
	if q.deleteRoleStmt != nil {
		if cerr := q.deleteRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoleStmt: %w", cerr)
		}
	}
	if q.deleteRolePermissionStmt != nil {
		if cerr := q.deleteRolePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRolePermissionStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getPermissionStmt != nil {
		if cerr := q.getPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPermissionStmt: %w", cerr)
		}
	}
	if q.getPermissionByInternalNameStmt != nil {
		if cerr := q.getPermissionByInternalNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPermissionByInternalNameStmt: %w", cerr)
		}
	}
	if q.getPermissionsStmt != nil {
		if cerr := q.getPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPermissionsStmt: %w", cerr)
		}
	}
	if q.getRoleStmt != nil {
		if cerr := q.getRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleStmt: %w", cerr)
		}
	}
	if q.getRoleByInternalNameStmt != nil {
		if cerr := q.getRoleByInternalNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleByInternalNameStmt: %w", cerr)
		}
	}
	if q.getRolePermissionsStmt != nil {
		if cerr := q.getRolePermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRolePermissionsStmt: %w", cerr)
		}
	}
	if q.getRolesStmt != nil {
		if cerr := q.getRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRolesStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.updatePermissionStmt != nil {
		if cerr := q.updatePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePermissionStmt: %w", cerr)
		}
	}
	if q.updateRoleStmt != nil {
		if cerr := q.updateRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoleStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	createPermissionStmt            *sql.Stmt
	createRoleStmt                  *sql.Stmt
	createRolePermissionStmt        *sql.Stmt
	createUserStmt                  *sql.Stmt
	deletePermissionStmt            *sql.Stmt
	deleteRoleStmt                  *sql.Stmt
	deleteRolePermissionStmt        *sql.Stmt
	deleteUserStmt                  *sql.Stmt
	getPermissionStmt               *sql.Stmt
	getPermissionByInternalNameStmt *sql.Stmt
	getPermissionsStmt              *sql.Stmt
	getRoleStmt                     *sql.Stmt
	getRoleByInternalNameStmt       *sql.Stmt
	getRolePermissionsStmt          *sql.Stmt
	getRolesStmt                    *sql.Stmt
	getUserStmt                     *sql.Stmt
	getUserByEmailStmt              *sql.Stmt
	getUsersStmt                    *sql.Stmt
	updatePermissionStmt            *sql.Stmt
	updateRoleStmt                  *sql.Stmt
	updateUserStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		createPermissionStmt:            q.createPermissionStmt,
		createRoleStmt:                  q.createRoleStmt,
		createRolePermissionStmt:        q.createRolePermissionStmt,
		createUserStmt:                  q.createUserStmt,
		deletePermissionStmt:            q.deletePermissionStmt,
		deleteRoleStmt:                  q.deleteRoleStmt,
		deleteRolePermissionStmt:        q.deleteRolePermissionStmt,
		deleteUserStmt:                  q.deleteUserStmt,
		getPermissionStmt:               q.getPermissionStmt,
		getPermissionByInternalNameStmt: q.getPermissionByInternalNameStmt,
		getPermissionsStmt:              q.getPermissionsStmt,
		getRoleStmt:                     q.getRoleStmt,
		getRoleByInternalNameStmt:       q.getRoleByInternalNameStmt,
		getRolePermissionsStmt:          q.getRolePermissionsStmt,
		getRolesStmt:                    q.getRolesStmt,
		getUserStmt:                     q.getUserStmt,
		getUserByEmailStmt:              q.getUserByEmailStmt,
		getUsersStmt:                    q.getUsersStmt,
		updatePermissionStmt:            q.updatePermissionStmt,
		updateRoleStmt:                  q.updateRoleStmt,
		updateUserStmt:                  q.updateUserStmt,
	}
}
