basePath: /api/v1
definitions:
  request.CreateAvatarRequest:
    properties:
      svg:
        type: string
    required:
    - svg
    type: object
  request.CreatePermissionRequest:
    properties:
      description:
        type: string
      internal_name:
        type: string
      name:
        type: string
    required:
    - description
    - internal_name
    - name
    type: object
  request.CreateRolePermissionRequest:
    properties:
      permission_ids:
        items:
          type: integer
        type: array
      role_id:
        type: integer
    required:
    - permission_ids
    - role_id
    type: object
  request.CreateRoleRequest:
    properties:
      description:
        type: string
      internal_name:
        type: string
      name:
        type: string
    required:
    - description
    - internal_name
    - name
    type: object
  request.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  request.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
      user_id:
        type: integer
    required:
    - refresh_token
    - user_id
    type: object
  request.UpdateAvatarRequest:
    properties:
      id:
        type: integer
      svg:
        type: string
    required:
    - id
    - svg
    type: object
  request.UpdatePermissionRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    required:
    - description
    - id
    - internal_name
    - name
    type: object
  request.UpdateRolePermissionRequest:
    properties:
      permission_ids:
        items:
          type: integer
        type: array
      role_id:
        type: integer
    required:
    - permission_ids
    - role_id
    type: object
  request.UpdateRoleRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    required:
    - description
    - id
    - internal_name
    - name
    type: object
  request.UpdateUserPasswordRequest:
    properties:
      hash:
        type: string
      password:
        type: string
    required:
    - hash
    - password
    type: object
  request.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - email
    - id
    - name
    type: object
  request.VerifyUserRequest:
    properties:
      hash:
        type: string
    required:
    - hash
    type: object
  response.CreateAvatarResponse:
    properties:
      id:
        type: integer
      svg:
        type: string
    type: object
  response.CreatePermissionResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    type: object
  response.CreateRolePermissionResponse:
    properties:
      permission_id:
        items:
          type: integer
        type: array
      role_id:
        type: integer
    type: object
  response.CreateRoleResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    type: object
  response.CreateUserResponse:
    properties:
      avatar_id:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role_id:
        type: integer
    type: object
  response.DeleteAvatarResponse:
    properties:
      id:
        type: integer
    type: object
  response.DeletePermissionResponse:
    properties:
      id:
        type: integer
    type: object
  response.DeleteRolePermissionByRoleIDResponse:
    properties:
      permission_id:
        items:
          type: integer
        type: array
      role_id:
        type: integer
    type: object
  response.DeleteRoleResponse:
    properties:
      id:
        type: integer
    type: object
  response.DeleteUserResponse:
    properties:
      id:
        type: integer
    type: object
  response.ForgotPasswordResponse:
    properties:
      id:
        type: integer
    type: object
  response.GetAvatarResponse:
    properties:
      id:
        type: integer
      svg:
        type: string
    type: object
  response.GetPermissionResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    type: object
  response.GetPermissionsResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    type: object
  response.GetRolePermissionsResponse:
    properties:
      permission_id:
        items:
          type: integer
        type: array
      role_id:
        type: integer
    type: object
  response.GetRoleResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    type: object
  response.GetRolesResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    type: object
  response.GetUserResponse:
    properties:
      avatar_id:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role_id:
        type: integer
    type: object
  response.GetUsersResponse:
    properties:
      avatar_id:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role_id:
        type: integer
    type: object
  response.LoginResponse:
    properties:
      active:
        type: boolean
      refresh_token:
        type: string
      refresh_token_expires_in:
        type: integer
      token:
        type: string
      token_expires_in:
        type: integer
      user_id:
        type: integer
    type: object
  response.RefreshTokenResponse:
    properties:
      active:
        type: boolean
      refresh_token:
        type: string
      refresh_token_expires_in:
        type: integer
      token:
        type: string
      token_expires_in:
        type: integer
      user_id:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
    type: object
  response.ResponseError:
    properties:
      err:
        type: string
    type: object
  response.UpdateAvatarResponse:
    properties:
      id:
        type: integer
      svg:
        type: string
    type: object
  response.UpdatePermissionResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    type: object
  response.UpdateRolePermissionResponse:
    properties:
      permission_id:
        items:
          type: integer
        type: array
      role_id:
        type: integer
    type: object
  response.UpdateRoleResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      internal_name:
        type: string
      name:
        type: string
    type: object
  response.UpdateUserPasswordResponse:
    properties:
      id:
        type: integer
    type: object
  response.UpdateUserResponse:
    properties:
      avatar_id:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role_id:
        type: integer
    type: object
  response.VerifyUserResponse:
    properties:
      id:
        type: integer
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample server for GO tools.
  title: GO API
  version: v1
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Get JWT
      parameters:
      - description: User
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      summary: Get JWT
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get Refresh JWT
      parameters:
      - description: User
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/request.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.RefreshTokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      summary: Get Refresh JWT
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.CreateUserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Register User
      tags:
      - User
  /avatar:
    get:
      consumes:
      - application/json
      description: Get Avatars
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.GetAvatarResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get Avatars
      tags:
      - Avatar
    post:
      consumes:
      - application/json
      description: Create Avatar
      parameters:
      - description: Avatar
        in: body
        name: avatar
        required: true
        schema:
          $ref: '#/definitions/request.CreateAvatarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.CreateAvatarResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Create Avatar
      tags:
      - Avatar
  /avatar/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Avatar
      parameters:
      - description: Avatar ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.DeleteAvatarResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Delete Avatar
      tags:
      - Avatar
    get:
      consumes:
      - application/json
      description: Get Avatar
      parameters:
      - description: Avatar ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.GetAvatarResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get Avatar
      tags:
      - Avatar
    put:
      consumes:
      - application/json
      description: Update Avatar
      parameters:
      - description: Avatar ID
        in: path
        name: id
        required: true
        type: string
      - description: Avatar
        in: body
        name: avatar
        required: true
        schema:
          $ref: '#/definitions/request.UpdateAvatarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.UpdateAvatarResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Update Avatar
      tags:
      - Avatar
  /permission:
    get:
      consumes:
      - application/json
      description: Get Permissions
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.GetPermissionsResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get Permissions
      tags:
      - Permission
    post:
      consumes:
      - application/json
      description: Create Permission
      parameters:
      - description: Permission
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/request.CreatePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.CreatePermissionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Create Permission
      tags:
      - Permission
  /permission/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.DeletePermissionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - ApiKeyAuth: []
      - JWT: []
      summary: Delete Permission
      tags:
      - Permission
    get:
      consumes:
      - application/json
      description: Get Permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.GetPermissionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get Permission
      tags:
      - Permission
    put:
      consumes:
      - application/json
      description: Update Permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      - description: Permission
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/request.UpdatePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.UpdatePermissionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Update Permission
      tags:
      - Permission
  /role:
    get:
      consumes:
      - application/json
      description: Get Roles
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.GetRolesResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get Roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create Role
      parameters:
      - description: Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/request.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.CreateRoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Create Role
      tags:
      - Role
  /role/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.DeleteRoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Delete Role
      tags:
      - Role
    get:
      consumes:
      - application/json
      description: Get Role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.GetRoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get Role
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update Role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/request.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.UpdateRoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Update Role
      tags:
      - Role
  /role/{id}/permission:
    delete:
      consumes:
      - application/json
      description: Delete Role Permission
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.DeleteRolePermissionByRoleIDResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Delete Role Permission By Role ID
      tags:
      - RolePermission
    get:
      consumes:
      - application/json
      description: Get Role Permissions
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.GetRolePermissionsResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get Role Permissions
      tags:
      - RolePermission
    post:
      consumes:
      - application/json
      description: Create Role Permission
      parameters:
      - description: RolePermission
        in: body
        name: role_permission
        required: true
        schema:
          $ref: '#/definitions/request.CreateRolePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.CreateRolePermissionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Create Role Permission
      tags:
      - RolePermission
    put:
      consumes:
      - application/json
      description: Update Role Permission
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: RolePermission
        in: body
        name: role_permission
        required: true
        schema:
          $ref: '#/definitions/request.UpdateRolePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.UpdateRolePermissionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Update Role Permission
      tags:
      - RolePermission
  /user:
    get:
      consumes:
      - application/json
      description: Get Users
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.GetUsersResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get Users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.CreateUserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Create User
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.DeleteUserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.GetUserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Get User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.UpdateUserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      security:
      - JWT: []
      summary: Update User
      tags:
      - User
  /user/forgot-password:
    post:
      consumes:
      - application/json
      description: Forgot Password
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.ForgotPasswordResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      summary: Forgot Password
      tags:
      - User
  /user/update-password:
    post:
      consumes:
      - application/json
      description: Update User Password
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.UpdateUserPasswordResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      summary: Update User Password
      tags:
      - User
  /user/verify-user:
    post:
      consumes:
      - application/json
      description: Verify User
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.VerifyUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.VerifyUserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseError'
      summary: Verify User
      tags:
      - User
schemes:
- http
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
